name: 🔄 CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

permissions:
  contents: read
  pull-requests: write

jobs:
  validation:
    name: 🧪 Code Validation
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18, 20]

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🔍 TypeScript Type Check
        run: npm run type-check

      - name: 💄 Prettier Format Check
        run: npm run format:check

      - name: 🏗️ Build Check
        run: npm run build

      - name: 📊 Upload Build Artifacts
        if: matrix.node-version == 20
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: .next/
          retention-days: 1

  security:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🛡️ Run Security Audit
        run: npm audit --audit-level=moderate

      - name: 🔍 Dependency Check
        run: |
          # Check for outdated packages
          npm outdated || true

          # Check for unused dependencies
          npx depcheck --ignores="@types/*,eslint-*,prettier-*,husky,lint-staged" || true

  commit-validation:
    name: 📝 Commit Message Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📋 Validate Commit Messages
        run: |
          # Get all commits in the PR, excluding merge commits
          COMMITS=$(git log --pretty=format:"%s" --no-merges origin/main..HEAD)

          echo "Validating commit messages:"
          echo "$COMMITS"

          # Skip validation if no commits found
          if [ -z "$COMMITS" ]; then
            echo "ℹ️ No commits to validate"
            exit 0
          fi

          # Validate each commit message
          while IFS= read -r commit; do
            # Skip empty lines
            if [ -z "$commit" ]; then
              continue
            fi
            
            if [[ ! "$commit" =~ ^(feat|fix|docs|style|refactor|perf|test|chore|ci|build|revert)(\(.+\))?: .+ ]]; then
              echo "❌ Invalid commit message: '$commit'"
              echo "Commit messages must follow conventional commits format:"
              echo "type(scope): description"
              echo "Examples:"
              echo "  feat: add new button component"
              echo "  fix(header): resolve navigation issue"
              echo "  docs: update README"
              exit 1
            else
              echo "✅ Valid commit message: '$commit'"
            fi
          done <<< "$COMMITS"

  pr-validation:
    name: 🔍 Pull Request Validation
    runs-on: ubuntu-latest
    needs: [validation, security, commit-validation]
    if: github.event_name == 'pull_request'

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📊 PR Summary Comment
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            const comment = `## 🔍 PR Validation Summary

            ✅ **All validation checks passed!**

            ### 📋 Checks Completed:
            - 🧪 Code validation (TypeScript, Prettier)
            - 🏗️ Build verification
            - 🔒 Security audit
            - 📝 Commit message validation

            ### 🚀 Ready for merge!

            **Branch:** \`${pr.head.ref}\` → \`${pr.base.ref}\`
            **Commits:** ${pr.commits} commits
            **Files changed:** ${pr.changed_files} files

            *This PR will trigger automatic version management when merged to main.*`;

            // Check if comment already exists
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            const existingComment = comments.find(c => c.body.includes('PR Validation Summary'));

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }
