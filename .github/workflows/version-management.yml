name: 🔖 Version Management

on:
  push:
    branches: [main]
    paths-ignore:
      - "CHANGELOG.md"
      - "package.json"
      - "package-lock.json"

  # Allow manual triggering
  workflow_dispatch:
    inputs:
      release_type:
        description: "Type of release"
        required: true
        default: "auto"
        type: choice
        options:
          - auto
          - patch
          - minor
          - major
          - prerelease

permissions:
  contents: write
  pull-requests: write

jobs:
  version-bump:
    name: 🚀 Auto Version Bump
    runs-on: ubuntu-latest

    # Skip if the commit is from the version bump itself
    if: "!contains(github.event.head_commit.message, 'chore(release):')"

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: 📦 Install Dependencies
        run: npm ci

      - name: ✅ Run Validation
        run: npm run validate

      - name: 🔍 Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: 📊 Analyze Commits
        id: analyze
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            echo "No previous tags found, this will be the first release"
            echo "release_type=first" >> $GITHUB_OUTPUT
          else
            # Analyze commit messages since last tag
            COMMITS=$(git log ${LAST_TAG}..HEAD --oneline)
            echo "Commits since ${LAST_TAG}:"
            echo "$COMMITS"
            
            if echo "$COMMITS" | grep -q "^[a-f0-9]* feat"; then
              echo "Feature commits found - minor release"
              echo "release_type=minor" >> $GITHUB_OUTPUT
            elif echo "$COMMITS" | grep -q "^[a-f0-9]* fix"; then
              echo "Fix commits found - patch release"
              echo "release_type=patch" >> $GITHUB_OUTPUT
            elif echo "$COMMITS" | grep -qE "^[a-f0-9]* (docs|style|refactor|perf|test|chore|ci|build)"; then
              echo "Other commits found - patch release"
              echo "release_type=patch" >> $GITHUB_OUTPUT
            else
              echo "No significant commits found - patch release"
              echo "release_type=patch" >> $GITHUB_OUTPUT
            fi
          fi

      - name: 🏷️ Bump Version (Auto)
        if: github.event_name == 'push' && steps.analyze.outputs.release_type == 'first'
        run: npm run release:first

      - name: 🏷️ Bump Version (Minor)
        if: (github.event_name == 'push' && steps.analyze.outputs.release_type == 'minor') || (github.event_name == 'workflow_dispatch' && github.event.inputs.release_type == 'minor')
        run: npm run release:minor

      - name: 🏷️ Bump Version (Patch)
        if: (github.event_name == 'push' && steps.analyze.outputs.release_type == 'patch') || (github.event_name == 'workflow_dispatch' && github.event.inputs.release_type == 'patch')
        run: npm run release:patch

      - name: 🏷️ Bump Version (Major)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.release_type == 'major'
        run: npm run release:major

      - name: 🏷️ Bump Version (Prerelease)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.release_type == 'prerelease'
        run: npm run release:prerelease

      - name: 🏷️ Bump Version (Auto - Manual)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.release_type == 'auto'
        run: npm run release

      - name: 📤 Push Changes
        run: |
          git push --follow-tags origin main

      - name: 📋 Get Release Info
        id: release_info
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0)
          echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "version=${LATEST_TAG#v}" >> $GITHUB_OUTPUT

      - name: 📝 Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.release_info.outputs.tag }}
          release_name: 🚀 Release ${{ steps.release_info.outputs.tag }}
          body: |
            ## 🎉 What's New in ${{ steps.release_info.outputs.tag }}

            This release was automatically generated based on the conventional commits since the last release.

            ### 📋 Full Changelog
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ steps.analyze.outputs.previous_tag }}...${{ steps.release_info.outputs.tag }}

            ### 🛠️ Installation
            ```bash
            npm install
            npm run dev
            ```

            ### 🔗 Links
            - [📚 Documentation](https://github.com/${{ github.repository }}#readme)
            - [🐛 Report Issues](https://github.com/${{ github.repository }}/issues)
            - [💬 Discussions](https://github.com/${{ github.repository }}/discussions)
          draft: false
          prerelease: ${{ contains(steps.release_info.outputs.tag, 'alpha') || contains(steps.release_info.outputs.tag, 'beta') || contains(steps.release_info.outputs.tag, 'rc') }}

  notification:
    name: 📢 Notify Release
    runs-on: ubuntu-latest
    needs: version-bump
    if: success()

    steps:
      - name: 🎉 Success Notification
        run: |
          echo "🎉 Successfully created new release!"
          echo "🏷️ New version: ${{ needs.version-bump.outputs.tag }}"
          echo "📝 Changelog updated"
          echo "🚀 GitHub release created"
